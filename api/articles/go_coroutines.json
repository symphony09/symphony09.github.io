{"title":"Coroutines for Go -1","uid":"603edc745edac1f578da82734f79ee53","slug":"go_coroutines","date":"2024-06-13T04:00:00.000Z","updated":"2024-06-13T14:30:24.333Z","comments":true,"path":"api/articles/go_coroutines.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这篇文章翻译自 Go 团队主要成员 <a href=\"https://swtch.com/~rsc/\">Russ Cox</a>的协程提案<a href=\"https://research.swtch.com/coro\">research!rsc: Coroutines for Go (swtch.com)</a>，此协程 coroutines 非彼协程 goroutine，由于全文较长，预计分为两篇，这篇主要说明是什么和为什么。本文采用AI辅助翻译，不妥之处，欢迎指正。</p></blockquote>\n<p>本文讲述了为什么我们需要一个 Go 协程包，以及它将成为什么样子。但首先，什么是协程？</p>\n<p>今天的程序员都非常熟悉函数调用（子程序）：F 调用 G，F 暂停，G 运行。G 完成其工作，可能调用并等待其他函数，然 后返回。当 G 返回时，G 消失，F 继续运行。在这种模式下，只有一个函数在运行，而其调用者等待，整个调用栈都是如此。</p>\n<p>与子程序不同，协程在不同的栈上并发运行，但仍然只有一个协程在运行，同时其调用者等待。F 开始 G，但 G 不立即运行。相反，F 必须显式地恢复 （resume）G，然后 G 才能运行。在任何时候，G 都可以反过来通过 yield 回到 F，这会暂停 G，然后继续 F 。最终 F 再次调用 resume，这会暂停 F，然后继续 G。他们继续反复运行，直到 G 返回，这会清理 G，并从其最近的恢复操作继续 F，并给 F 发出信号，表明 G 已完成，F 应不再尝试重新启动 G。在这种模式下，只有一个协程在运行，而其调用者在不同的栈上等待。他们以一种定义明确、协调的方式轮流运行。</p>\n<p>这有点抽象。让我们看一些实际的程序。</p>\n<h2 id=\"Lua中的协程\"><a href=\"#Lua中的协程\" class=\"headerlink\" title=\"Lua中的协程\"></a>Lua中的协程</h2><p>要使用一个著名的示例，我们可以考虑比较两个二叉树，看它们是否具有相同的值序列，即使它们的结构不同。例如，以下 是使用Lua 5编写的生成一些二叉树的代码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function T(l, v, r)\n    return &#123;left &#x3D; l, value &#x3D; v, right &#x3D; r&#125;\nend\n\ne &#x3D; nil\nt1 &#x3D; T(T(T(e, 1, e), 2, T(e, 3, e)), 4, T(e, 5, e))\nt2 &#x3D; T(e, 1, T(e, 2, T(e, 3, T(e, 4, T(e, 5, e)))))\nt3 &#x3D; T(e, 1, T(e, 2, T(e, 3, T(e, 4, T(e, 6, e)))))</code></pre>\n\n<p>t1和t2两个二叉树都包含值1，2，3，4，5；t3包含1，2，3，4，6。</p>\n<p> 我们可以编写一个协程来遍历一棵树并返回每个值：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function visit(t)\n    if t ~&#x3D; nil then  -- note: ~&#x3D; is &quot;not equal&quot;\n        visit(t.left)\n        coroutine.yield(t.value)\n        visit(t.right)\n    end\nend</code></pre>\n\n<p>为了比较两棵树，我们可以创建两个访问协程，然后交替读取并比较相邻的值：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function cmp(t1, t2)\n    co1 &#x3D; coroutine.create(visit)\n    co2 &#x3D; coroutine.create(visit)\n    while true\n    do\n        ok1, v1 &#x3D; coroutine.resume(co1, t1)\n        ok2, v2 &#x3D; coroutine.resume(co2, t2)\n        if ok1 ~&#x3D; ok2 or v1 ~&#x3D; v2 then\n            return false\n        end\n        if not ok1 and not ok2 then\n            return true\n        end\n    end\nend</code></pre>\n\n<p>t1和t2参数仅在第一次迭代中用于协程 resume，作为访问参数。后续的resume返回值来自协程 yield，但代码会忽略该值。</p>\n<p>【译者注】第一次迭代调用 <code>visit(t1)</code>，在 visit 函数中先尝试 <code>visit(t1.left)</code>，如果左子树为空，那么就执行<code>coroutine.yield(t.value)</code>，yield 是有返回值的，就是 cmp 函数中 <code>coroutine.resume</code> 传入的 t1，但是这个 t1 参数被忽略了。</p>\n<p>一个更符合Lua语言习惯的版本是使用coroutine.wrap，它返回一个隐藏协程对象的函数：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function cmp(t1, t2)\n    next1 &#x3D; coroutine.wrap(function() visit(t1) end)\n    next2 &#x3D; coroutine.wrap(function() visit(t2) end)\n    while true\n    do\n        v1 &#x3D; next1()\n        v2 &#x3D; next2()\n        if v1 ~&#x3D; v2 then\n            return false\n        end\n        if v1 &#x3D;&#x3D; nil and v2 &#x3D;&#x3D; nil then\n            return true\n        end\n    end\nend</code></pre>\n\n<p> 当协程完成时，next 函数返回nil。</p>\n<h2 id=\"Python中的生成器（在CLU中为迭代器）\"><a href=\"#Python中的生成器（在CLU中为迭代器）\" class=\"headerlink\" title=\"Python中的生成器（在CLU中为迭代器）\"></a>Python中的生成器（在CLU中为迭代器）</h2><p>Python提供了类似于Lua的协程的生成器，但它们并不是协程，所以值得指出它们之间的差异。主要区别在于，“直白的”程序并不行得通。例如，这里是我们的Lua树和访问者的直接Python翻译：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def T(l, v, r):\n    return &#123;&#39;left&#39;: l, &#39;value&#39;: v, &#39;right&#39;: r&#125;\n\ndef visit(t):\n    if t is not None:\n        visit(t[&#39;left&#39;])\n        yield t[&#39;value&#39;]\n        visit(t[&#39;right&#39;])</code></pre>\n\n<p>但是这个直白的翻译行不通：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; e &#x3D; None\n&gt;&gt;&gt; t1 &#x3D; T(T(T(e, 1, e), 2, T(e, 3, e)), 4, T(e, 5, e))\n&gt;&gt;&gt; for x in visit(t1):\n...     print(x)\n...\n4\n&gt;&gt;&gt;</code></pre>\n\n<p>我们失去了1，2，3和5。发生了什么？</p>\n<p>在Python中，那个 visit 函数并没有定义为一个普通函数。因为 body 中包含一个 yield 语句，所以结果是一个生成器：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; type(visit(t1))\n&lt;class &#39;generator&#39;&gt;\n&gt;&gt;&gt;</code></pre>\n\n<p>visit(t[‘left’]) 的调用并没有运行 visit 函数中的任何代码。它只是创建并返回一个新的生成器，然后被丢弃。为了避 免丢弃这些结果，您必须遍历生成器并重新 yield 它们：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def visit(t):\n    if t is not None:\n        for x in visit(t[&#39;left&#39;]):\n            yield x\n        yield t[&#39;value&#39;]\n        for x in visit(t[&#39;right&#39;])\n            yield x</code></pre>\n\n<p> Python 3.3 引入了 <code>yield</code> <code>from</code> 的语法，允许：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def visit(t):\n    if t is not None:\n        yield from visit(t[&#39;left&#39;]):\n        yield t[&#39;value&#39;]\n        yield from visit(t[&#39;right&#39;])</code></pre>\n\n<p>生成器对象包含单个 visit 调用的情况下的状态信息，这意味着局部变量值和当前执行的行号。该状态每次生成器重新开始时都会压入调用栈中，然后在每次 yield 时从调用栈中弹出到生成器对象，这只能发生在顶部的调用栈帧。这样，生成器使用与原始程序相同的栈，避免了需要完整的协程实现，但引入了这些令人困惑的限制。</p>\n<p>【译者注】这里我理解是相当于把遍历操作换成了递归操作。</p>\n<p> Python的生成器似乎几乎完全是从CLU复制过来的，CLU创始人提供了这个抽象（以及其他许多东西）。虽然CLU将其称为迭代器，而不是生成器，但CLU树迭代器看起来像这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">visit &#x3D; iter (t: cvt) yields (int):\n    tagcase t\n        tag empty: ;\n        tag non_empty(t: node):\n            for x: int\n                in tree$visit(t.left) do\n                    yield(x);\n                    end;\n            yield(t.value);\n            for x: int\n                in tree$visit(t.right) do\n                    yield(x);\n                    end;\n        end;\n    end visit;</code></pre>\n\n<p>特别是对于检查树的标记联合表示使用的标签，语法有所不同，但是基本结构，包括嵌套的 for 循环，与最初的 Python 版本完全相同。此外，由于CLU是静态类型，因此visit显然被标记为迭代器（iter）而不是函数（proc在CLU中）。由于类型信息的帮助，编译器可以（我假设也）诊断出将visit作为普通函数调用的错误，就像我们那个有 bug 的Python示例一样。</p>\n<p>关于CLU的实现，原始实现者写道：“迭代器是协程的一种形式；然而，它们的使用受到足够的限制，因此仅使用程序栈来实 现。”使用迭代器因此的开销比使用过程要稍微高一些。这听起来与我为Python生成器所提供的解释完全相同。此外，更多信息， 可以参考<a href=\"https://dl.acm.org/doi/10.1145/359763.359789\">Abstraction Mechanisms in CLU</a>，特别是第4.2节，第4.3节和第6节。</p>\n<h2 id=\"协程，线程和生成器\"><a href=\"#协程，线程和生成器\" class=\"headerlink\" title=\"协程，线程和生成器\"></a>协程，线程和生成器</h2><p>首先，协程，线程和生成器看起来都很相似。它们都提供某种形式的并发，但它们在一些重要方面有所不同。</p>\n<ul>\n<li>协程通过无并行性提供并发：当一个协程运行时，恢复或让给它的那个协程或线程都没有并行执行。<ul>\n<li> 因为协程一个接一个地运行，只在程序的特定点进行切换，所以协程之间可以共享数据而不发生竞争。显式的切换（如第一 个Lua示例中的coroutine.resume或第二个Lua示例中的调用下一个函数）作为同步点，创建 happens-before 边。</li>\n<li>因为调度是显式的（没有任何抢占），并且完全由操作系统之外完成，协程切换最多只需要大约十纳秒，通常甚至更少。启动和退出比线程便宜得多。</li>\n</ul>\n</li>\n<li>线程比协程具有更多的能力，但成本更高。额外的能力是并行性，成本是调度器的开销，包括更昂贵的上下文切换和需要在 某种程度上实现预夺。通常操作系统提供线程，线程切换需要几微秒。<ul>\n<li>对于这个分类法，Go的goroutines是便宜的线程：goroutine切换接近于几百纳秒，因为Go运行时承担了部分调度工作，但goroutines仍然提供了线程的全部并行性和预夺。 （Java的新轻量级线程基本上与goroutines相同。）</li>\n</ul>\n</li>\n<li>生成器提供的能力比协程少，因为只有协程的顶层帧允许 yield。这个帧在对象和调用堆栈之间来回移动，以暂停和恢复它 。</li>\n</ul>\n<p> 协程对于编写希望使用程序结构而不是并行的程序是一个有用的构建块。有关详细示例，请参阅我之前的帖子，“<a href=\"https://research.swtch.com/pcdata\">Storing Data in Control Flow</a>”。其他示例，请参阅Ana Lúcia De Moura和Roberto Ierusalimschy于2009年发表的论文 “<a href=\"https://dl.acm.org/doi/pdf/10.1145/1462166.1462167\">Revisiting Coroutines</a>”。 对于原始示例，请参阅Melvin Conway于1963年发表的论文“<a href=\"https://dl.acm.org/doi/pdf/10.1145/366663.366704\">Design of a Separable Transition-Diagram Compiler</a>”。</p>\n<h2 id=\"为什么要在-Go-中实现协程\"><a href=\"#为什么要在-Go-中实现协程\" class=\"headerlink\" title=\"为什么要在 Go 中实现协程\"></a>为什么要在 Go 中实现协程</h2><p>协程是一种并发模式，而不是现有的Go并发库直接提供的。goroutine通常是足够接近的，但我们看到了，它们并不相同，有时候这种差异很重要。</p>\n<p>例如，Rob Pike的2011年的演讲“<a href=\"https://go.dev/talks/2011/lex.slide\">Lexical Scanning in Go</a>”介绍了text/template包的原始词法器和解析器。它们分别运行在不同的goroutine中，通过一个channel进行通信， imperfectly模拟了一对协程：词法器进程正向前看，而解析器处理最近的。生成器是不够好的——词法器产生许多不同的函数的结果——但full goroutines被证明是有点太多的。goroutines提供的并行性引起了竞争，最终导致放弃该 设计，转而使用词法器将状态存储在对象中，这更像是协程的真实模拟。适当的协程可以避免竞争，并且比goroutines更高效。</p>\n<p>一个预期的未来 coroutines 使用案例在 Go 中的是遍历通用集合。我们讨论了为 Go 添加支持范围 over 函数，这将鼓励集合和其他抽象提供类似 CLU 样式的迭代器函数。迭代器如今可以使用函数值实现，而无需任何语言更改。例如，一个稍微简化 版的树迭代器可以在 Go 中如下所示：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func (t *Tree[V]) All(yield func(v V)) &#123;\n    if t !&#x3D; nil &#123;\n        t.left.All(yield)\n        yield(t.value)\n        t.right.All(yield)\n    &#125;\n&#125;</code></pre>\n\n<p>那个迭代器现在可以如下所示进行调用：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">t.All(func(v V) &#123;\n    fmt.Println(v)\n&#125;)</code></pre>\n\n<p> 也许在 Go 的一个未来版本中，可以以如下方式调用：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">for v :&#x3D; range t.All &#123;\n    fmt.Println(v)\n&#125;</code></pre>\n\n<p>有时，我们可能需要以一种不适合单层 for 循环的方式遍历集合。二叉树比较就是一个例子：两个迭代需要以某种方式交替进行。正如我们已经看到的，协程可以提供解决方案，让我们将像 Tree.All這樣的“推”迭代器变成返回一个值流，每个调用返回一个值 的“拉”迭代器。</p>\n","feature":true,"text":" 这篇文章翻译自 Go 团队主要成员 Russ Cox的协程提案research!rsc: Coroutines for Go (swtch.com)，此协程 coroutines 非彼协程 goroutine，由于全文较长，预计分为两篇，这篇主要说明是什么和为什么。本文采用AI...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"编程","slug":"编程","count":4,"path":"api/categories/编程.json"}],"tags":[{"name":"golang","slug":"golang","count":5,"path":"api/tags/golang.json"},{"name":"翻译","slug":"翻译","count":1,"path":"api/tags/翻译.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">Lua中的协程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Python%E4%B8%AD%E7%9A%84%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88%E5%9C%A8CLU%E4%B8%AD%E4%B8%BA%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">Python中的生成器（在CLU中为迭代器）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8\"><span class=\"toc-text\">协程，线程和生成器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9C%A8-Go-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">为什么要在 Go 中实现协程</span></a></li></ol>","author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"NAS 折腾记","uid":"5e6bac11d8337953e8e2ec023a083948","slug":"nas1","date":"2021-07-26T03:29:41.000Z","updated":"2024-06-13T14:30:24.333Z","comments":true,"path":"api/articles/nas1.json","keywords":null,"cover":"https://w.wallhaven.cc/full/43/wallhaven-43zkod.jpg","text":"因为本人没多少money，加上喜欢折腾，所以并未采用现成的 NAS 方案，选择自己凑配硬件搭建。在21年初初步搭建完成，现在已经平稳运行半年左右，还算满意。现在得空分享一下搭建经验，供同好参考。 方案介绍不同于常见的多盘位 NAS 机箱，我采用了迷你主机加硬盘盒的形式，通过网线连...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"折腾","slug":"折腾","count":1,"path":"api/categories/折腾.json"}],"tags":[{"name":"硬件","slug":"硬件","count":2,"path":"api/tags/硬件.json"},{"name":"nas","slug":"nas","count":1,"path":"api/tags/nas.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}