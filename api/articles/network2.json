{"title":"TCP：序列号与滑动窗口","uid":"dcd5fd0682cc948a30be92bebe89ab9a","slug":"network2","date":"2021-04-20T05:40:26.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/network2.json","keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n\n<h3 id=\"序列号的作用\"><a href=\"#序列号的作用\" class=\"headerlink\" title=\"序列号的作用\"></a>序列号的作用</h3><p>上一篇博客中提到了序列号在建立tcp连接中的作用。不光如此，序列号还是tcp可靠传输的基础。</p>\n<p>为了可靠传输就要防止丢包，所以接受端需要向发送端确认，就像我们收到快递包裹也要确认收货。类比来讲，序列号就像是快递单号。</p>\n<p>但是与现实不同的是，tcp包数量庞大。这就造成：</p>\n<ul>\n<li>单个单个确认会<strong>浪费网络资源</strong></li>\n<li>发送端在等待确认时无事可做会<strong>浪费时间和硬件资源</strong></li>\n</ul>\n<p>所以最好批量发送和确认，发送端一次性发送一组tcp包，接受端一次性确认一组tcp包。</p>\n<h3 id=\"怎么一次性确认多个包\"><a href=\"#怎么一次性确认多个包\" class=\"headerlink\" title=\"怎么一次性确认多个包\"></a>怎么一次性确认多个包</h3><p>很简单，序列号设计为连续的，确认顺序最靠后的包就代表收到了之前所有的包。考虑到可能出现丢包，如果收到如下一组包（数字代表包的序列号）：</p>\n<p>{… …，233，234，235，237，238}</p>\n<p>此时为了保证收到缺失的包应确认235，而237，238都会当做没收到，这样发送端就会再次发送235之后的包。为了保证可靠性，这么做是值得的。</p>\n<p>实际中确认报文（ACK）发送的序列号要加1，表示从这个序列号的包开始发送。</p>\n<h3 id=\"滑动窗口的作用\"><a href=\"#滑动窗口的作用\" class=\"headerlink\" title=\"滑动窗口的作用\"></a>滑动窗口的作用</h3><p>在批量发包时，一次性发多少数量是个问题，滑动窗口就代表这个数量。由于主要需要考虑接受端的能力，所以由接收端发送给发送端（两端间会往来数据，这里指广义上的数据接受端和发送端）。</p>\n<p>发送端收到窗口大小后，就会计算发了多少包，剩余多少容量以保证保证不超过窗口大小，直到窗口更新。</p>\n<h3 id=\"发送的时机\"><a href=\"#发送的时机\" class=\"headerlink\" title=\"发送的时机\"></a>发送的时机</h3><p>将窗口更新和ACK报文合并发送可以提高网络效率。</p>\n","text":" 序列号的作用上一篇博客中提到了序列号在建立tcp连接中的作用。不光如此，序列号还是tcp可靠传输的基础。 为了可靠传输就要防止丢包，所以接受端需要向发送端确认，就像我们收到快递包裹也要确认收货。类比来讲，序列号就像是快递单号。 但是与现实不同的是，tcp包数量庞大。这就造成： ...","link":"","photos":[],"count_time":{"symbolsCount":610,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"网络","slug":"学习笔记/网络","count":2,"path":"api/categories/学习笔记/网络.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">序列号的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%8E%E4%B9%88%E4%B8%80%E6%AC%A1%E6%80%A7%E7%A1%AE%E8%AE%A4%E5%A4%9A%E4%B8%AA%E5%8C%85\"><span class=\"toc-text\">怎么一次性确认多个包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">滑动窗口的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E7%9A%84%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">发送的时机</span></a></li></ol>","author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL：redo 和 undo","uid":"30e17c6fd6cc1b89b9fcc4be10f9ed75","slug":"mysql1","date":"2021-04-27T04:55:29.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/mysql1.json","keywords":null,"cover":null,"text":" redo log 作用redo log 用以保证事务的持久性，当数据库突然宕机后重启就需要使用 redo log 恢复已经提交但是没来得及同步到磁盘上的事务。 再深挖一下为什么数据库宕机重启就需要恢复数据呢，这是因为直接将修改的数据页同步到磁盘意味着频繁的随机写入操作。懂点磁盘...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"MySQL","slug":"学习笔记/MySQL","count":1,"path":"api/categories/学习笔记/MySQL.json"}],"tags":[{"name":"mysql","slug":"mysql","count":1,"path":"api/tags/mysql.json"},{"name":"事务","slug":"事务","count":1,"path":"api/tags/事务.json"},{"name":"调优","slug":"调优","count":1,"path":"api/tags/调优.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"TCP：握手挥手","uid":"b7863f675c1f74636fbdcd034261f5ad","slug":"network1","date":"2021-04-18T05:08:29.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/network1.json","keywords":null,"cover":null,"text":" 什么是三次握手和四次挥手三次握手和四次挥手是http建立连接和关闭连接过程的形象描述。这个说法比较有名，因为我们通常喜欢以类比的方式来认识未知的事物。 但是从本质原因出发去认识事物或许可以获得更深刻的认识。 为什么要三次握手主要是因为要防止旧的重复连接初始化造成混乱 在网络状况...","link":"","photos":[],"count_time":{"symbolsCount":992,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"网络","slug":"学习笔记/网络","count":2,"path":"api/categories/学习笔记/网络.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}