{"name":"编程","slug":"编程","count":4,"postlist":[{"title":"Golang最佳实践：Functional Option","uid":"7d914a4575876c2b19b68d691e332d41","slug":"go-option","date":"2021-06-29T03:38:41.000Z","updated":"2021-06-29T17:41:23.147Z","comments":true,"path":"api/articles/go-option.json","keywords":null,"cover":"https://w.wallhaven.cc/full/y8/wallhaven-y85ojk.png","text":"使用场景在初始化结构体时常常会碰到这样的情况，一些字段是不能为空且没有默认值，一些字段是不能为空但有默认值，还有的的则可以为空。 举例来说，有这么一个结构体 type Pool struct &#123; Capacity int32 ExpiryDuration time.Du...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":4,"path":"api/categories/编程.json"}],"tags":[{"name":"golang","slug":"golang","count":5,"path":"api/tags/golang.json"},{"name":"最佳实践","slug":"最佳实践","count":2,"path":"api/tags/最佳实践.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Golang内存泄露","uid":"41d158fdf8b143deea2f819f3d3b843b","slug":"go-leak","date":"2021-06-30T03:38:41.000Z","updated":"2024-06-13T14:30:24.333Z","comments":true,"path":"api/articles/go-leak.json","keywords":null,"cover":"https://w.wallhaven.cc/full/y8/wallhaven-y85ojk.png","text":"防患未然 避免引用大字符串和大切片的一小部分导致无用部分无法被回收，可以复制有用部分到新串和新切片以解除引用。对于切片，也可以将无用部分设nil。 避免因为代码设计中的一些错误而导致一些协程处于永久阻塞状态。如： 从一个永远不会有其它协程向其发送数据的通道接收数据； 向一个永远不...","link":"","photos":[],"count_time":{"symbolsCount":312,"symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":4,"path":"api/categories/编程.json"}],"tags":[{"name":"golang","slug":"golang","count":5,"path":"api/tags/golang.json"},{"name":"最佳实践","slug":"最佳实践","count":2,"path":"api/tags/最佳实践.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Golang标准库：sync","uid":"4dbb2ad4d40b43ce8f2a583cb86bc39c","slug":"go-sync","date":"2021-07-04T05:35:41.000Z","updated":"2024-06-13T14:30:24.333Z","comments":true,"path":"api/articles/go-sync.json","keywords":null,"cover":"https://w.wallhaven.cc/full/y8/wallhaven-y85ojk.png","text":"sync 包​ 虽然go主要通过协程和通道来完成同步，但是在某些情况下使用sync包提供的同步更加简洁和巧妙。下面列举sync包的应用场景及相应的用法和坑。 一：单例单例是经常要用到的一个编程模式，go最简单的单例实现就是使用 sync.One 示例package main im...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":4,"path":"api/categories/编程.json"}],"tags":[{"name":"golang","slug":"golang","count":5,"path":"api/tags/golang.json"},{"name":"标准库","slug":"标准库","count":1,"path":"api/tags/标准库.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Coroutines for Go -1","uid":"603edc745edac1f578da82734f79ee53","slug":"go_coroutines","date":"2024-06-13T04:00:00.000Z","updated":"2024-06-13T14:30:24.333Z","comments":true,"path":"api/articles/go_coroutines.json","keywords":null,"cover":null,"text":" 这篇文章翻译自 Go 团队主要成员 Russ Cox的协程提案research!rsc: Coroutines for Go (swtch.com)，此协程 coroutines 非彼协程 goroutine，由于全文较长，预计分为两篇，这篇主要说明是什么和为什么。本文采用AI...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"编程","slug":"编程","count":4,"path":"api/categories/编程.json"}],"tags":[{"name":"golang","slug":"golang","count":5,"path":"api/tags/golang.json"},{"name":"翻译","slug":"翻译","count":1,"path":"api/tags/翻译.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]}