{"name":"学习笔记","slug":"学习笔记","count":9,"postlist":[{"title":"MySQL：MVCC","uid":"3b8d2c61522914168806280ffb0906e3","slug":"mysql2","date":"2021-05-05T05:30:02.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/mysql2.json","keywords":null,"cover":null,"text":" 实现原理innoDB的行记录格式中有6字节事务ID的和7字节的回滚指针，通过为每一行记录添加这两个额外的隐藏值来实现MVCC，这两个值一个记录这行数据何时被创建，另外一个记录这行数据何时过期（或者被删除）。 但是InnoDB并不存储这些事件发生时的实际时间，相反它只存储这些事件...","link":"","photos":[],"count_time":{"symbolsCount":945,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"mysql","slug":"学习笔记/mysql","count":1,"path":"api/categories/学习笔记/mysql.json"}],"tags":[{"name":"mysql实现原理","slug":"mysql实现原理","count":1,"path":"api/tags/mysql实现原理.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MySQL：redo 和 undo","uid":"30e17c6fd6cc1b89b9fcc4be10f9ed75","slug":"mysql1","date":"2021-04-27T04:55:29.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/mysql1.json","keywords":null,"cover":null,"text":" redo log 作用redo log 用以保证事务的持久性，当数据库突然宕机后重启就需要使用 redo log 恢复已经提交但是没来得及同步到磁盘上的事务。 再深挖一下为什么数据库宕机重启就需要恢复数据呢，这是因为直接将修改的数据页同步到磁盘意味着频繁的随机写入操作。懂点磁盘...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"MySQL","slug":"学习笔记/MySQL","count":1,"path":"api/categories/学习笔记/MySQL.json"}],"tags":[{"name":"mysql","slug":"mysql","count":1,"path":"api/tags/mysql.json"},{"name":"事务","slug":"事务","count":1,"path":"api/tags/事务.json"},{"name":"调优","slug":"调优","count":1,"path":"api/tags/调优.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TCP：握手挥手","uid":"b7863f675c1f74636fbdcd034261f5ad","slug":"network1","date":"2021-04-18T05:08:29.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/network1.json","keywords":null,"cover":null,"text":" 什么是三次握手和四次挥手三次握手和四次挥手是http建立连接和关闭连接过程的形象描述。这个说法比较有名，因为我们通常喜欢以类比的方式来认识未知的事物。 但是从本质原因出发去认识事物或许可以获得更深刻的认识。 为什么要三次握手主要是因为要防止旧的重复连接初始化造成混乱 在网络状况...","link":"","photos":[],"count_time":{"symbolsCount":992,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"网络","slug":"学习笔记/网络","count":2,"path":"api/categories/学习笔记/网络.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Redis（一）：SDS","uid":"f3d0b05742076b1a6be5180a2d1e28f1","slug":"redis1","date":"2021-03-05T08:24:45.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/redis1.json","keywords":null,"cover":[],"text":" Redis 是 C 语言实现的，但是 Redis 放弃了 C 语言传统的字符串而是自己创建了一种名为}简单动态字符串 SDS（Simple Dynamic String）的抽象类型，并将 SDS 用作 Redis 的默认字符串表示，其主要原因就是传统的字符串表示方式并不能满足 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"Redis","slug":"学习笔记/Redis","count":5,"path":"api/categories/学习笔记/Redis.json"}],"tags":[{"name":"Redis数据结构与对象","slug":"Redis数据结构与对象","count":5,"path":"api/tags/Redis数据结构与对象.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TCP：序列号与滑动窗口","uid":"dcd5fd0682cc948a30be92bebe89ab9a","slug":"network2","date":"2021-04-20T05:40:26.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/network2.json","keywords":null,"cover":null,"text":" 序列号的作用上一篇博客中提到了序列号在建立tcp连接中的作用。不光如此，序列号还是tcp可靠传输的基础。 为了可靠传输就要防止丢包，所以接受端需要向发送端确认，就像我们收到快递包裹也要确认收货。类比来讲，序列号就像是快递单号。 但是与现实不同的是，tcp包数量庞大。这就造成： ...","link":"","photos":[],"count_time":{"symbolsCount":610,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"网络","slug":"学习笔记/网络","count":2,"path":"api/categories/学习笔记/网络.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Redis（二）：链表","uid":"46dc18036d332e4e6512d9692f74910b","slug":"redis2","date":"2021-03-09T04:13:45.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/redis2.json","keywords":null,"cover":[],"text":" 链表被广泛用于实现Redis的各种功能，比如列表键、发布与订阅、慢查询、监视器等。直接看结构示意图： 特征总结如下： 双端：链表节点带有prev和next指针，获取某个节点的前置节点和后置节点的复杂度都是O（1）。 无环：表头节点的prev指针和表尾节点的next指针都指向NU...","link":"","photos":[],"count_time":{"symbolsCount":470,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"Redis","slug":"学习笔记/Redis","count":5,"path":"api/categories/学习笔记/Redis.json"}],"tags":[{"name":"Redis数据结构与对象","slug":"Redis数据结构与对象","count":5,"path":"api/tags/Redis数据结构与对象.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Redis（三）：字典","uid":"f9b13b980458a49d4d916f8fb1d54566","slug":"redis3","date":"2021-03-09T05:11:45.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/redis3.json","keywords":null,"cover":[],"text":" 字典在Redis中的应用相当广泛，比如Redis的数据库就是使用字典来作为底层实现的，对数据库的增、删、查、改操作也是构建在对字典的操作之上的。 字典结构解析Redis的字典使用哈希表作为底层实现，结构如图： table属性是一个数组，数组中的每个元素都是一个指向dict.h/...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"Redis","slug":"学习笔记/Redis","count":5,"path":"api/categories/学习笔记/Redis.json"}],"tags":[{"name":"Redis数据结构与对象","slug":"Redis数据结构与对象","count":5,"path":"api/tags/Redis数据结构与对象.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Redis（四）：跳跃表","uid":"b7745da1129b3624e0119421c5f639dd","slug":"redis4","date":"2021-03-11T05:26:55.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/redis4.json","keywords":null,"cover":[],"text":" 跳跃表支持平均O（logN）、最坏O（N）复杂度的节点查找，还可以通过顺序性操作来批量处理节点。在大部分情况下，跳跃表的效率可以和平衡树相媲美，而且实现还更加简单。 跳跃表结构解析 header：指向跳跃表的表头节点。 tail：指向跳跃表的表尾节点。 level：记录目前跳跃...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"Redis","slug":"学习笔记/Redis","count":5,"path":"api/categories/学习笔记/Redis.json"}],"tags":[{"name":"Redis数据结构与对象","slug":"Redis数据结构与对象","count":5,"path":"api/tags/Redis数据结构与对象.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Redis（五）：整数集合","uid":"9661b4a0c78c3413d585a5b60f2d0c10","slug":"redis5","date":"2021-03-12T05:47:30.000Z","updated":"2024-06-13T14:30:24.333Z","comments":false,"path":"api/articles/redis5.json","keywords":null,"cover":[],"text":" 整数集合（intset）是Redis用于保存整数值的集合抽象数据结构，它可以保存类型为int16_t、int32_t或者int64_t的整数值，并且保证集合中不会出现重复元素。 整数集合结构示意图 encoding属性的值表示底层数组的整数类型。 length属性的值表示数组的...","link":"","photos":[],"count_time":{"symbolsCount":562,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":9,"path":"api/categories/学习笔记.json"},{"name":"Redis","slug":"学习笔记/Redis","count":5,"path":"api/categories/学习笔记/Redis.json"}],"tags":[{"name":"Redis数据结构与对象","slug":"Redis数据结构与对象","count":5,"path":"api/tags/Redis数据结构与对象.json"}],"author":{"name":"年鲤","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"喜欢折腾，随性而为<br/>sunfish69@163.com","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}